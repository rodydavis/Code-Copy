import { addComment } from "./comment";
import { exportNode } from "./node";

export enum ExportTarget {
  Canvas = "canvas",
  SVG = "svg",
}

export function exportCode(target: ExportTarget) {
  const sb: string[] = [];
  addComment(
    sb,
    target,
    'This code is generated by the "Code Copy" Figma Plugin'
  );
  const nodes = figma.currentPage.selection || [];
  if (nodes.length === 0) return sb.join("\n");

  const topX = nodes.reduce((acc, node) => {
    return Math.min(acc, node.x);
  }, nodes[0].x);
  const topY = nodes.reduce((acc, node) => {
    return Math.min(acc, node.y);
  }, nodes[0].y);

  let selectionWidth = 0;
  let selectionHeight = 0;

  for (const node of nodes) {
    selectionWidth = Math.max(selectionWidth, node.x + node.width);
    selectionHeight = Math.max(selectionHeight, node.y + node.height);
  }

  const exportAllNodes = () => {
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (!node.visible) continue;
      exportNode(sb, target, node, topX, topY);
    }
  };

  switch (target) {
    case ExportTarget.Canvas:
      sb.push(`const canvas = document.createElement('canvas');`);
      sb.push(`canvas.width = ${selectionWidth};`);
      sb.push(`canvas.height = ${selectionHeight};`);
      sb.push(`const ctx = canvas.getContext('2d');`);
      sb.push(``);

      exportAllNodes();
      break;
    case ExportTarget.SVG:
      sb.push(
        `<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 ${selectionWidth} ${selectionHeight}">`
      );
      sb.push(``);
      exportAllNodes();
      sb.push(``);
      sb.push(`</svg>`);
  }
  return sb.join("\n");
}

export interface NodeMetaData<T extends SceneNode> {
  node: T;
  relativeX: number;
  relativeY: number;
}
